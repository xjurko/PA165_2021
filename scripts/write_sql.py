from typing import List, Set, Tuple
from model import Movie, Actor, Director

BATCH_SIZE = 100


def chunks(lst, n=BATCH_SIZE):
  """Yield successive n-sized chunks from lst."""
  for i in range(0, len(lst), n):
    yield lst[i:i + n]


def nullable(v):
  return v if v else "NULL"


def writeMode(append: bool) -> str:
  return 'a' if append else 'w'


def writeMovies(movies: List[Movie], append):
  """
    create table Movie (
       id bigint generated by default as identity,
        caption varchar(255),
        externalRef varchar(255),
        name varchar(255) not null,
        releaseYear integer,
        runtimeMin integer not null,
        posterUrl varchar, //ADD to abckend
        primary key (id)
    )


    create table Movie_genres (
       Movie_id bigint not null,
        genres varchar(255)
    )
  """

  with open("./imdb/out/movies.sql", writeMode(append)) as file:
    for c in chunks(movies):
      file.write(
        f"INSERT INTO Movie (id, caption, externalRef, name, releaseYear, runtimeMin, posterUrl) VALUES ")
      values = [f"({m.id},'{m.caption}','{m.externalRef}','{m.title}',{m.year},{m.runtimeMin}, '{m.posterUrl}')" for m
                in c]
      values = ",\n".join(values)
      file.write(f"{values};\n")

  with open("./imdb/out/movies_genres.sql", writeMode(append)) as file:
    for c in chunks([(m, genre) for m in movies for genre in m.genres]):
      file.write(f"INSERT INTO Movie_genres (Movie_id, genres) VALUES ")
      values = [f"({mg[0].id}, '{mg[1].upper()}')" for mg in c]
      values = ",\n".join(values)
      file.write(f"{values};\n")


def writeActors(actors: List[Actor], append):
  """
    create table Actor (
       id bigint generated by default as identity,
        birthDate date,
        deathDate date,
        fullName varchar(255) not null,
        height integer not null, //remove this from backend
        externalRef varchar, //add this to backend
        posterUrl varchar //add this to backend
        primary key (id)
    )
  """

  with open("./imdb/out/actors.sql", writeMode(append)) as file:
    for c in chunks(actors):
      file.write(f"INSERT INTO Actor (id, birthDate, deathDate, fullName, externalRef, posterUrl) VALUES ")
      values = [
        f"({a.id}, {nullable(a.birthYear)}, {nullable(a.deathYear)}, '{a.name}', '{a.externalRef}', '{a.posterUrl}')"
        for a in c]
      values = ",\n".join(values)
      file.write(f"{values};\n")


def writeDirectors(directors: List[Director], append):
  """
    create table Director (
       id bigint generated by default as identity,
        birthDate date,
        name varchar(255) not null,
        externalRef varchar, //add this to backend
        posterUrl varchar //add this to backend
        primary key (id)
    )
  """
  with open("./imdb/out/directors.sql", writeMode(append)) as file:
    for c in chunks(directors):
      file.write(f"INSERT INTO Director (id, birthDate, deathDate, name, externalRef, posterUrl) VALUES ")
      values = [
        f"({d.id}, {nullable(d.birthYear)}, {nullable(d.deathYear)}, '{d.name}', '{d.externalRef}', '{d.posterUrl}')"
        for d in c]
      values = ",\n".join(values)
      file.write(f"{values};\n")


def writeMovieActorMappings(mappings: List[Tuple[str, str]], append):
  """
    create table Actor_Movie (
        cast_id bigint not null,
        movies_id bigint not null,
        primary key (cast_id, movies_id)
    )
  """

  with open("./imdb/out/actor_movie.sql", writeMode(append)) as file:
    for c in chunks(mappings):
      file.write(f"INSERT INTO Actor_Movie (cast_id, movies_id) VALUES ")
      values = [f"({int(m[1][2:])}, {int(m[0][2:])})" for m in c]
      values = ",\n".join(values)
      file.write(f"{values};\n")


def writeMovieDirectorMappings(mappings: List[Tuple[str, str]], append):
  """
    create table Director_Movie (
       directors_id bigint not null,
       movies_id bigint not null,
       primary key (directors_id, movies_id)
    )
  """

  with open("./imdb/out/director_movie.sql", writeMode(append)) as file:
    for c in chunks(mappings):
      file.write(f"INSERT INTO Director_Movie (directors_id, movies_id) VALUES ")
      values = [f"({int(m[1][2:])}, {int(m[0][2:])})" for m in c]
      values = ",\n".join(values)
      file.write(f"{values};\n")


